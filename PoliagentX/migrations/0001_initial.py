# Generated by Django 5.2.4 on 2025-07-06 22:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EXCELFileUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_type', models.CharField(choices=[('indicators', 'Government Indicators'), ('expenditure', 'Government Expenditure'), ('interdependencies', 'Interdependencies')], max_length=32)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'excel_file_uploads',
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(max_length=7)),
                ('initial_value', models.FloatField()),
                ('final_value', models.FloatField()),
                ('alpha', models.FloatField()),
                ('alpha_prime', models.FloatField()),
                ('beta', models.FloatField()),
                ('success_rate', models.FloatField()),
                ('instrumental', models.BooleanField()),
                ('monitoring', models.FloatField()),
                ('rule_of_law', models.FloatField()),
                ('min_value', models.FloatField()),
                ('max_value', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentExpenditure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=255)),
                ('amount', models.FloatField()),
                ('year', models.IntegerField()),
                ('sdg', models.CharField(blank=True, max_length=50)),
                ('programme_code', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='PoliagentX.excelfileupload')),
            ],
            options={
                'db_table': 'government_expenditure',
            },
        ),
        migrations.CreateModel(
            name='GovernmentIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_label', models.CharField(max_length=255, unique=True)),
                ('indicator_name', models.CharField(max_length=255)),
                ('initial_value', models.FloatField(help_text='Initial value of the indicator.')),
                ('final_value', models.FloatField(help_text='Final value of the indicator.')),
                ('alpha', models.FloatField(help_text='Sensitivity of the indicator to policy action.')),
                ('alpha_prime', models.FloatField(help_text='Adjusted alpha value.')),
                ('beta', models.FloatField(help_text='Policy bottleneck effect on indicator.')),
                ('success_rate', models.FloatField(help_text='Probability of success for achieving target.')),
                ('instrumental', models.BooleanField(default=False, help_text='Is this indicator instrumental?')),
                ('indicator_type', models.CharField(choices=[('input', 'Input'), ('output', 'Output'), ('outcome', 'Outcome')], help_text='Classification of indicator: input, output, or outcome.', max_length=255)),
                ('monitoring', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Is the indicator being monitored?', max_length=10)),
                ('rule_of_law', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Is this indicator tied to rule of law?', max_length=10)),
                ('min_value', models.FloatField(help_text='Minimum possible value for the indicator.')),
                ('max_value', models.FloatField(help_text='Maximum possible value for the indicator.')),
                ('source_file', models.ForeignKey(blank=True, help_text='CSV file from which this indicator was sourced.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='PoliagentX.excelfileupload')),
            ],
            options={
                'verbose_name': 'Government Indicator',
                'verbose_name_plural': 'Government Indicators',
                'ordering': ['indicator_name'],
            },
        ),
        migrations.CreateModel(
            name='Interdependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('from_expenditure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_interdependencies', to='PoliagentX.governmentexpenditure')),
                ('from_indicator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_interdependencies', to='PoliagentX.governmentindicator')),
                ('source_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='PoliagentX.excelfileupload')),
                ('to_expenditure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_interdependencies', to='PoliagentX.governmentexpenditure')),
                ('to_indicator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_interdependencies', to='PoliagentX.governmentindicator')),
            ],
            options={
                'db_table': 'interdependencies',
            },
        ),
        migrations.CreateModel(
            name='WorkflowRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_id', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('preparing', 'Preparing Data'), ('calibrating', 'Calibrating Model'), ('simulating', 'Running Simulation'), ('analyzing_bottlenecks', 'Analyzing Bottlenecks'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('output_directory', models.CharField(max_length=500)),
                ('error_message', models.TextField(blank=True)),
                ('expenditure_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expenditure_workflows', to='PoliagentX.excelfileupload')),
                ('indicators_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicator_workflows', to='PoliagentX.excelfileupload')),
            ],
            options={
                'db_table': 'workflow_runs',
            },
        ),
        migrations.CreateModel(
            name='BottleneckAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bottleneck_count', models.IntegerField()),
                ('total_indicators', models.IntegerField()),
                ('results_csv_path', models.CharField(max_length=500)),
                ('development_gaps_plot_path', models.CharField(max_length=500)),
                ('gap_reduction_plot_path', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('workflow_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bottleneck_analyses', to='PoliagentX.workflowrun')),
            ],
            options={
                'db_table': 'bottleneck_analyses',
            },
        ),
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_code', models.CharField(max_length=100)),
                ('sdg', models.CharField(max_length=50)),
                ('goal', models.FloatField()),
                ('baseline_final', models.FloatField()),
                ('frontier_final', models.FloatField()),
                ('gap_base', models.FloatField()),
                ('gap_frontier', models.FloatField()),
                ('gap_reduction', models.FloatField()),
                ('historical_performance', models.FloatField()),
                ('is_bottleneck', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('indicator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PoliagentX.governmentindicator')),
                ('workflow_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysis_results', to='PoliagentX.workflowrun')),
            ],
            options={
                'db_table': 'analysis_results',
            },
        ),
    ]
